// Code generated by protoc-gen-gogo.
// source: message.proto
// DO NOT EDIT!

/*
	Package protobuf is a generated protocol buffer package.

	It is generated from these files:
		message.proto

	It has these top-level messages:
		Ballot
		PreAccept
		PreAcceptOK
		PreAcceptReply
		Accept
		AcceptReply
		Prepare
		PrepareReply
		Commit
*/
package protobuf

import proto "github.com/gogo/protobuf/proto"
import math "math"

// discarding unused import gogoproto "github.com/gogo/protobuf/gogoproto/gogo.pb"

import io "io"
import fmt "fmt"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"

import fmt1 "fmt"
import strings "strings"
import reflect "reflect"

import fmt2 "fmt"
import strings1 "strings"
import github_com_gogo_protobuf_proto1 "github.com/gogo/protobuf/proto"
import sort "sort"
import strconv "strconv"
import reflect1 "reflect"

import fmt3 "fmt"
import bytes "bytes"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

type State int32

const (
	State_NilStatus   State = 1
	State_Preparing   State = 2
	State_PreAccepted State = 3
	State_Accepted    State = 4
	State_Committed   State = 5
)

var State_name = map[int32]string{
	1: "NilStatus",
	2: "Preparing",
	3: "PreAccepted",
	4: "Accepted",
	5: "Committed",
}
var State_value = map[string]int32{
	"NilStatus":   1,
	"Preparing":   2,
	"PreAccepted": 3,
	"Accepted":    4,
	"Committed":   5,
}

func (x State) Enum() *State {
	p := new(State)
	*p = x
	return p
}
func (x State) String() string {
	return proto.EnumName(State_name, int32(x))
}
func (x *State) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(State_value, data, "State")
	if err != nil {
		return err
	}
	*x = State(value)
	return nil
}

// Nested fields.
type Ballot struct {
	Epoch            *uint32 `protobuf:"varint,1,req" json:"Epoch,omitempty"`
	Number           *uint64 `protobuf:"varint,2,req" json:"Number,omitempty"`
	ReplicaID        *uint32 `protobuf:"varint,3,req" json:"ReplicaID,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Ballot) Reset()      { *m = Ballot{} }
func (*Ballot) ProtoMessage() {}

func (m *Ballot) GetEpoch() uint32 {
	if m != nil && m.Epoch != nil {
		return *m.Epoch
	}
	return 0
}

func (m *Ballot) GetNumber() uint64 {
	if m != nil && m.Number != nil {
		return *m.Number
	}
	return 0
}

func (m *Ballot) GetReplicaID() uint32 {
	if m != nil && m.ReplicaID != nil {
		return *m.ReplicaID
	}
	return 0
}

// EPaxos messages.
type PreAccept struct {
	ReplicaID        *uint32  `protobuf:"varint,1,req" json:"ReplicaID,omitempty"`
	InstanceID       *uint64  `protobuf:"varint,2,req" json:"InstanceID,omitempty"`
	Cmds             [][]byte `protobuf:"bytes,3,rep" json:"Cmds,omitempty"`
	Deps             []uint64 `protobuf:"varint,4,rep" json:"Deps,omitempty"`
	Ballot           *Ballot  `protobuf:"bytes,5,req" json:"Ballot,omitempty"`
	From             *uint32  `protobuf:"varint,6,req" json:"From,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *PreAccept) Reset()      { *m = PreAccept{} }
func (*PreAccept) ProtoMessage() {}

func (m *PreAccept) GetReplicaID() uint32 {
	if m != nil && m.ReplicaID != nil {
		return *m.ReplicaID
	}
	return 0
}

func (m *PreAccept) GetInstanceID() uint64 {
	if m != nil && m.InstanceID != nil {
		return *m.InstanceID
	}
	return 0
}

func (m *PreAccept) GetCmds() [][]byte {
	if m != nil {
		return m.Cmds
	}
	return nil
}

func (m *PreAccept) GetDeps() []uint64 {
	if m != nil {
		return m.Deps
	}
	return nil
}

func (m *PreAccept) GetBallot() *Ballot {
	if m != nil {
		return m.Ballot
	}
	return nil
}

func (m *PreAccept) GetFrom() uint32 {
	if m != nil && m.From != nil {
		return *m.From
	}
	return 0
}

type PreAcceptOK struct {
	ReplicaID        *uint32 `protobuf:"varint,1,req" json:"ReplicaID,omitempty"`
	InstanceID       *uint64 `protobuf:"varint,2,req" json:"InstanceID,omitempty"`
	From             *uint32 `protobuf:"varint,3,req" json:"From,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PreAcceptOK) Reset()      { *m = PreAcceptOK{} }
func (*PreAcceptOK) ProtoMessage() {}

func (m *PreAcceptOK) GetReplicaID() uint32 {
	if m != nil && m.ReplicaID != nil {
		return *m.ReplicaID
	}
	return 0
}

func (m *PreAcceptOK) GetInstanceID() uint64 {
	if m != nil && m.InstanceID != nil {
		return *m.InstanceID
	}
	return 0
}

func (m *PreAcceptOK) GetFrom() uint32 {
	if m != nil && m.From != nil {
		return *m.From
	}
	return 0
}

type PreAcceptReply struct {
	ReplicaID        *uint32  `protobuf:"varint,1,req" json:"ReplicaID,omitempty"`
	InstanceID       *uint64  `protobuf:"varint,2,req" json:"InstanceID,omitempty"`
	Deps             []uint64 `protobuf:"varint,3,rep" json:"Deps,omitempty"`
	Ballot           *Ballot  `protobuf:"bytes,4,req" json:"Ballot,omitempty"`
	From             *uint32  `protobuf:"varint,5,req" json:"From,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *PreAcceptReply) Reset()      { *m = PreAcceptReply{} }
func (*PreAcceptReply) ProtoMessage() {}

func (m *PreAcceptReply) GetReplicaID() uint32 {
	if m != nil && m.ReplicaID != nil {
		return *m.ReplicaID
	}
	return 0
}

func (m *PreAcceptReply) GetInstanceID() uint64 {
	if m != nil && m.InstanceID != nil {
		return *m.InstanceID
	}
	return 0
}

func (m *PreAcceptReply) GetDeps() []uint64 {
	if m != nil {
		return m.Deps
	}
	return nil
}

func (m *PreAcceptReply) GetBallot() *Ballot {
	if m != nil {
		return m.Ballot
	}
	return nil
}

func (m *PreAcceptReply) GetFrom() uint32 {
	if m != nil && m.From != nil {
		return *m.From
	}
	return 0
}

type Accept struct {
	ReplicaID        *uint32  `protobuf:"varint,1,req" json:"ReplicaID,omitempty"`
	InstanceID       *uint64  `protobuf:"varint,2,req" json:"InstanceID,omitempty"`
	Cmds             [][]byte `protobuf:"bytes,3,rep" json:"Cmds,omitempty"`
	Deps             []uint64 `protobuf:"varint,4,rep" json:"Deps,omitempty"`
	Ballot           *Ballot  `protobuf:"bytes,5,req" json:"Ballot,omitempty"`
	From             *uint32  `protobuf:"varint,6,req" json:"From,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Accept) Reset()      { *m = Accept{} }
func (*Accept) ProtoMessage() {}

func (m *Accept) GetReplicaID() uint32 {
	if m != nil && m.ReplicaID != nil {
		return *m.ReplicaID
	}
	return 0
}

func (m *Accept) GetInstanceID() uint64 {
	if m != nil && m.InstanceID != nil {
		return *m.InstanceID
	}
	return 0
}

func (m *Accept) GetCmds() [][]byte {
	if m != nil {
		return m.Cmds
	}
	return nil
}

func (m *Accept) GetDeps() []uint64 {
	if m != nil {
		return m.Deps
	}
	return nil
}

func (m *Accept) GetBallot() *Ballot {
	if m != nil {
		return m.Ballot
	}
	return nil
}

func (m *Accept) GetFrom() uint32 {
	if m != nil && m.From != nil {
		return *m.From
	}
	return 0
}

type AcceptReply struct {
	ReplicaID        *uint32 `protobuf:"varint,1,req" json:"ReplicaID,omitempty"`
	InstanceID       *uint64 `protobuf:"varint,2,req" json:"InstanceID,omitempty"`
	Ballot           *Ballot `protobuf:"bytes,3,req" json:"Ballot,omitempty"`
	From             *uint32 `protobuf:"varint,4,req" json:"From,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *AcceptReply) Reset()      { *m = AcceptReply{} }
func (*AcceptReply) ProtoMessage() {}

func (m *AcceptReply) GetReplicaID() uint32 {
	if m != nil && m.ReplicaID != nil {
		return *m.ReplicaID
	}
	return 0
}

func (m *AcceptReply) GetInstanceID() uint64 {
	if m != nil && m.InstanceID != nil {
		return *m.InstanceID
	}
	return 0
}

func (m *AcceptReply) GetBallot() *Ballot {
	if m != nil {
		return m.Ballot
	}
	return nil
}

func (m *AcceptReply) GetFrom() uint32 {
	if m != nil && m.From != nil {
		return *m.From
	}
	return 0
}

type Prepare struct {
	ReplicaID        *uint32 `protobuf:"varint,1,req" json:"ReplicaID,omitempty"`
	InstanceID       *uint64 `protobuf:"varint,2,req" json:"InstanceID,omitempty"`
	Ballot           *Ballot `protobuf:"bytes,3,req" json:"Ballot,omitempty"`
	From             *uint32 `protobuf:"varint,4,req" json:"From,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Prepare) Reset()      { *m = Prepare{} }
func (*Prepare) ProtoMessage() {}

func (m *Prepare) GetReplicaID() uint32 {
	if m != nil && m.ReplicaID != nil {
		return *m.ReplicaID
	}
	return 0
}

func (m *Prepare) GetInstanceID() uint64 {
	if m != nil && m.InstanceID != nil {
		return *m.InstanceID
	}
	return 0
}

func (m *Prepare) GetBallot() *Ballot {
	if m != nil {
		return m.Ballot
	}
	return nil
}

func (m *Prepare) GetFrom() uint32 {
	if m != nil && m.From != nil {
		return *m.From
	}
	return 0
}

type PrepareReply struct {
	ReplicaID        *uint32  `protobuf:"varint,1,req" json:"ReplicaID,omitempty"`
	InstanceID       *uint64  `protobuf:"varint,2,req" json:"InstanceID,omitempty"`
	State            *State   `protobuf:"varint,3,req,enum=protobuf.State" json:"State,omitempty"`
	Cmds             [][]byte `protobuf:"bytes,4,rep" json:"Cmds,omitempty"`
	Deps             []uint64 `protobuf:"varint,5,rep" json:"Deps,omitempty"`
	Ballot           *Ballot  `protobuf:"bytes,6,req" json:"Ballot,omitempty"`
	OriginalBallot   *Ballot  `protobuf:"bytes,7,req" json:"OriginalBallot,omitempty"`
	IsFromLeader     *bool    `protobuf:"varint,8,req" json:"IsFromLeader,omitempty"`
	From             *uint32  `protobuf:"varint,9,req" json:"From,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *PrepareReply) Reset()      { *m = PrepareReply{} }
func (*PrepareReply) ProtoMessage() {}

func (m *PrepareReply) GetReplicaID() uint32 {
	if m != nil && m.ReplicaID != nil {
		return *m.ReplicaID
	}
	return 0
}

func (m *PrepareReply) GetInstanceID() uint64 {
	if m != nil && m.InstanceID != nil {
		return *m.InstanceID
	}
	return 0
}

func (m *PrepareReply) GetState() State {
	if m != nil && m.State != nil {
		return *m.State
	}
	return State_NilStatus
}

func (m *PrepareReply) GetCmds() [][]byte {
	if m != nil {
		return m.Cmds
	}
	return nil
}

func (m *PrepareReply) GetDeps() []uint64 {
	if m != nil {
		return m.Deps
	}
	return nil
}

func (m *PrepareReply) GetBallot() *Ballot {
	if m != nil {
		return m.Ballot
	}
	return nil
}

func (m *PrepareReply) GetOriginalBallot() *Ballot {
	if m != nil {
		return m.OriginalBallot
	}
	return nil
}

func (m *PrepareReply) GetIsFromLeader() bool {
	if m != nil && m.IsFromLeader != nil {
		return *m.IsFromLeader
	}
	return false
}

func (m *PrepareReply) GetFrom() uint32 {
	if m != nil && m.From != nil {
		return *m.From
	}
	return 0
}

type Commit struct {
	ReplicaID        *uint32  `protobuf:"varint,1,req" json:"ReplicaID,omitempty"`
	InstancdID       *uint64  `protobuf:"varint,2,req" json:"InstancdID,omitempty"`
	Cmds             [][]byte `protobuf:"bytes,3,rep" json:"Cmds,omitempty"`
	Deps             []uint64 `protobuf:"varint,4,rep" json:"Deps,omitempty"`
	From             *uint32  `protobuf:"varint,5,req" json:"From,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Commit) Reset()      { *m = Commit{} }
func (*Commit) ProtoMessage() {}

func (m *Commit) GetReplicaID() uint32 {
	if m != nil && m.ReplicaID != nil {
		return *m.ReplicaID
	}
	return 0
}

func (m *Commit) GetInstancdID() uint64 {
	if m != nil && m.InstancdID != nil {
		return *m.InstancdID
	}
	return 0
}

func (m *Commit) GetCmds() [][]byte {
	if m != nil {
		return m.Cmds
	}
	return nil
}

func (m *Commit) GetDeps() []uint64 {
	if m != nil {
		return m.Deps
	}
	return nil
}

func (m *Commit) GetFrom() uint32 {
	if m != nil && m.From != nil {
		return *m.From
	}
	return 0
}

func init() {
	proto.RegisterEnum("protobuf.State", State_name, State_value)
}
func (m *Ballot) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Epoch = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Number = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicaID", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReplicaID = &v
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *PreAccept) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicaID", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReplicaID = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceID", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InstanceID = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cmds", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cmds = append(m.Cmds, make([]byte, postIndex-index))
			copy(m.Cmds[len(m.Cmds)-1], data[index:postIndex])
			index = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deps", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Deps = append(m.Deps, v)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ballot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ballot == nil {
				m.Ballot = &Ballot{}
			}
			if err := m.Ballot.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.From = &v
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *PreAcceptOK) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicaID", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReplicaID = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceID", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InstanceID = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.From = &v
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *PreAcceptReply) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicaID", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReplicaID = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceID", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InstanceID = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deps", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Deps = append(m.Deps, v)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ballot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ballot == nil {
				m.Ballot = &Ballot{}
			}
			if err := m.Ballot.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.From = &v
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *Accept) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicaID", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReplicaID = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceID", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InstanceID = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cmds", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cmds = append(m.Cmds, make([]byte, postIndex-index))
			copy(m.Cmds[len(m.Cmds)-1], data[index:postIndex])
			index = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deps", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Deps = append(m.Deps, v)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ballot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ballot == nil {
				m.Ballot = &Ballot{}
			}
			if err := m.Ballot.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.From = &v
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *AcceptReply) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicaID", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReplicaID = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceID", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InstanceID = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ballot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ballot == nil {
				m.Ballot = &Ballot{}
			}
			if err := m.Ballot.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.From = &v
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *Prepare) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicaID", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReplicaID = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceID", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InstanceID = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ballot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ballot == nil {
				m.Ballot = &Ballot{}
			}
			if err := m.Ballot.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.From = &v
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *PrepareReply) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicaID", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReplicaID = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceID", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InstanceID = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var v State
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (State(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.State = &v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cmds", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cmds = append(m.Cmds, make([]byte, postIndex-index))
			copy(m.Cmds[len(m.Cmds)-1], data[index:postIndex])
			index = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deps", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Deps = append(m.Deps, v)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ballot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ballot == nil {
				m.Ballot = &Ballot{}
			}
			if err := m.Ballot.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalBallot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OriginalBallot == nil {
				m.OriginalBallot = &Ballot{}
			}
			if err := m.OriginalBallot.Unmarshal(data[index:postIndex]); err != nil {
				return err
			}
			index = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFromLeader", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsFromLeader = &b
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.From = &v
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (m *Commit) Unmarshal(data []byte) error {
	l := len(data)
	index := 0
	for index < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if index >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[index]
			index++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicaID", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReplicaID = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstancdID", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InstancdID = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cmds", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			postIndex := index + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cmds = append(m.Cmds, make([]byte, postIndex-index))
			copy(m.Cmds[len(m.Cmds)-1], data[index:postIndex])
			index = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deps", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Deps = append(m.Deps, v)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if index >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[index]
				index++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.From = &v
		default:
			var sizeOfWire int
			for {
				sizeOfWire++
				wire >>= 7
				if wire == 0 {
					break
				}
			}
			index -= sizeOfWire
			skippy, err := github_com_gogo_protobuf_proto.Skip(data[index:])
			if err != nil {
				return err
			}
			if (index + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[index:index+skippy]...)
			index += skippy
		}
	}
	return nil
}
func (this *Ballot) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Ballot{`,
		`Epoch:` + valueToStringMessage(this.Epoch) + `,`,
		`Number:` + valueToStringMessage(this.Number) + `,`,
		`ReplicaID:` + valueToStringMessage(this.ReplicaID) + `,`,
		`XXX_unrecognized:` + fmt1.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PreAccept) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PreAccept{`,
		`ReplicaID:` + valueToStringMessage(this.ReplicaID) + `,`,
		`InstanceID:` + valueToStringMessage(this.InstanceID) + `,`,
		`Cmds:` + fmt1.Sprintf("%v", this.Cmds) + `,`,
		`Deps:` + fmt1.Sprintf("%v", this.Deps) + `,`,
		`Ballot:` + strings.Replace(fmt1.Sprintf("%v", this.Ballot), "Ballot", "Ballot", 1) + `,`,
		`From:` + valueToStringMessage(this.From) + `,`,
		`XXX_unrecognized:` + fmt1.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PreAcceptOK) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PreAcceptOK{`,
		`ReplicaID:` + valueToStringMessage(this.ReplicaID) + `,`,
		`InstanceID:` + valueToStringMessage(this.InstanceID) + `,`,
		`From:` + valueToStringMessage(this.From) + `,`,
		`XXX_unrecognized:` + fmt1.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PreAcceptReply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PreAcceptReply{`,
		`ReplicaID:` + valueToStringMessage(this.ReplicaID) + `,`,
		`InstanceID:` + valueToStringMessage(this.InstanceID) + `,`,
		`Deps:` + fmt1.Sprintf("%v", this.Deps) + `,`,
		`Ballot:` + strings.Replace(fmt1.Sprintf("%v", this.Ballot), "Ballot", "Ballot", 1) + `,`,
		`From:` + valueToStringMessage(this.From) + `,`,
		`XXX_unrecognized:` + fmt1.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Accept) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Accept{`,
		`ReplicaID:` + valueToStringMessage(this.ReplicaID) + `,`,
		`InstanceID:` + valueToStringMessage(this.InstanceID) + `,`,
		`Cmds:` + fmt1.Sprintf("%v", this.Cmds) + `,`,
		`Deps:` + fmt1.Sprintf("%v", this.Deps) + `,`,
		`Ballot:` + strings.Replace(fmt1.Sprintf("%v", this.Ballot), "Ballot", "Ballot", 1) + `,`,
		`From:` + valueToStringMessage(this.From) + `,`,
		`XXX_unrecognized:` + fmt1.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AcceptReply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AcceptReply{`,
		`ReplicaID:` + valueToStringMessage(this.ReplicaID) + `,`,
		`InstanceID:` + valueToStringMessage(this.InstanceID) + `,`,
		`Ballot:` + strings.Replace(fmt1.Sprintf("%v", this.Ballot), "Ballot", "Ballot", 1) + `,`,
		`From:` + valueToStringMessage(this.From) + `,`,
		`XXX_unrecognized:` + fmt1.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Prepare) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Prepare{`,
		`ReplicaID:` + valueToStringMessage(this.ReplicaID) + `,`,
		`InstanceID:` + valueToStringMessage(this.InstanceID) + `,`,
		`Ballot:` + strings.Replace(fmt1.Sprintf("%v", this.Ballot), "Ballot", "Ballot", 1) + `,`,
		`From:` + valueToStringMessage(this.From) + `,`,
		`XXX_unrecognized:` + fmt1.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PrepareReply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PrepareReply{`,
		`ReplicaID:` + valueToStringMessage(this.ReplicaID) + `,`,
		`InstanceID:` + valueToStringMessage(this.InstanceID) + `,`,
		`State:` + valueToStringMessage(this.State) + `,`,
		`Cmds:` + fmt1.Sprintf("%v", this.Cmds) + `,`,
		`Deps:` + fmt1.Sprintf("%v", this.Deps) + `,`,
		`Ballot:` + strings.Replace(fmt1.Sprintf("%v", this.Ballot), "Ballot", "Ballot", 1) + `,`,
		`OriginalBallot:` + strings.Replace(fmt1.Sprintf("%v", this.OriginalBallot), "Ballot", "Ballot", 1) + `,`,
		`IsFromLeader:` + valueToStringMessage(this.IsFromLeader) + `,`,
		`From:` + valueToStringMessage(this.From) + `,`,
		`XXX_unrecognized:` + fmt1.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Commit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Commit{`,
		`ReplicaID:` + valueToStringMessage(this.ReplicaID) + `,`,
		`InstancdID:` + valueToStringMessage(this.InstancdID) + `,`,
		`Cmds:` + fmt1.Sprintf("%v", this.Cmds) + `,`,
		`Deps:` + fmt1.Sprintf("%v", this.Deps) + `,`,
		`From:` + valueToStringMessage(this.From) + `,`,
		`XXX_unrecognized:` + fmt1.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMessage(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt1.Sprintf("*%v", pv)
}
func (m *Ballot) Size() (n int) {
	var l int
	_ = l
	if m.Epoch != nil {
		n += 1 + sovMessage(uint64(*m.Epoch))
	}
	if m.Number != nil {
		n += 1 + sovMessage(uint64(*m.Number))
	}
	if m.ReplicaID != nil {
		n += 1 + sovMessage(uint64(*m.ReplicaID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PreAccept) Size() (n int) {
	var l int
	_ = l
	if m.ReplicaID != nil {
		n += 1 + sovMessage(uint64(*m.ReplicaID))
	}
	if m.InstanceID != nil {
		n += 1 + sovMessage(uint64(*m.InstanceID))
	}
	if len(m.Cmds) > 0 {
		for _, b := range m.Cmds {
			l = len(b)
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	if len(m.Deps) > 0 {
		for _, e := range m.Deps {
			n += 1 + sovMessage(uint64(e))
		}
	}
	if m.Ballot != nil {
		l = m.Ballot.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.From != nil {
		n += 1 + sovMessage(uint64(*m.From))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PreAcceptOK) Size() (n int) {
	var l int
	_ = l
	if m.ReplicaID != nil {
		n += 1 + sovMessage(uint64(*m.ReplicaID))
	}
	if m.InstanceID != nil {
		n += 1 + sovMessage(uint64(*m.InstanceID))
	}
	if m.From != nil {
		n += 1 + sovMessage(uint64(*m.From))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PreAcceptReply) Size() (n int) {
	var l int
	_ = l
	if m.ReplicaID != nil {
		n += 1 + sovMessage(uint64(*m.ReplicaID))
	}
	if m.InstanceID != nil {
		n += 1 + sovMessage(uint64(*m.InstanceID))
	}
	if len(m.Deps) > 0 {
		for _, e := range m.Deps {
			n += 1 + sovMessage(uint64(e))
		}
	}
	if m.Ballot != nil {
		l = m.Ballot.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.From != nil {
		n += 1 + sovMessage(uint64(*m.From))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Accept) Size() (n int) {
	var l int
	_ = l
	if m.ReplicaID != nil {
		n += 1 + sovMessage(uint64(*m.ReplicaID))
	}
	if m.InstanceID != nil {
		n += 1 + sovMessage(uint64(*m.InstanceID))
	}
	if len(m.Cmds) > 0 {
		for _, b := range m.Cmds {
			l = len(b)
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	if len(m.Deps) > 0 {
		for _, e := range m.Deps {
			n += 1 + sovMessage(uint64(e))
		}
	}
	if m.Ballot != nil {
		l = m.Ballot.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.From != nil {
		n += 1 + sovMessage(uint64(*m.From))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AcceptReply) Size() (n int) {
	var l int
	_ = l
	if m.ReplicaID != nil {
		n += 1 + sovMessage(uint64(*m.ReplicaID))
	}
	if m.InstanceID != nil {
		n += 1 + sovMessage(uint64(*m.InstanceID))
	}
	if m.Ballot != nil {
		l = m.Ballot.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.From != nil {
		n += 1 + sovMessage(uint64(*m.From))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Prepare) Size() (n int) {
	var l int
	_ = l
	if m.ReplicaID != nil {
		n += 1 + sovMessage(uint64(*m.ReplicaID))
	}
	if m.InstanceID != nil {
		n += 1 + sovMessage(uint64(*m.InstanceID))
	}
	if m.Ballot != nil {
		l = m.Ballot.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.From != nil {
		n += 1 + sovMessage(uint64(*m.From))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PrepareReply) Size() (n int) {
	var l int
	_ = l
	if m.ReplicaID != nil {
		n += 1 + sovMessage(uint64(*m.ReplicaID))
	}
	if m.InstanceID != nil {
		n += 1 + sovMessage(uint64(*m.InstanceID))
	}
	if m.State != nil {
		n += 1 + sovMessage(uint64(*m.State))
	}
	if len(m.Cmds) > 0 {
		for _, b := range m.Cmds {
			l = len(b)
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	if len(m.Deps) > 0 {
		for _, e := range m.Deps {
			n += 1 + sovMessage(uint64(e))
		}
	}
	if m.Ballot != nil {
		l = m.Ballot.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.OriginalBallot != nil {
		l = m.OriginalBallot.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.IsFromLeader != nil {
		n += 2
	}
	if m.From != nil {
		n += 1 + sovMessage(uint64(*m.From))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Commit) Size() (n int) {
	var l int
	_ = l
	if m.ReplicaID != nil {
		n += 1 + sovMessage(uint64(*m.ReplicaID))
	}
	if m.InstancdID != nil {
		n += 1 + sovMessage(uint64(*m.InstancdID))
	}
	if len(m.Cmds) > 0 {
		for _, b := range m.Cmds {
			l = len(b)
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	if len(m.Deps) > 0 {
		for _, e := range m.Deps {
			n += 1 + sovMessage(uint64(e))
		}
	}
	if m.From != nil {
		n += 1 + sovMessage(uint64(*m.From))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMessage(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func NewPopulatedBallot(r randyMessage, easy bool) *Ballot {
	this := &Ballot{}
	v1 := r.Uint32()
	this.Epoch = &v1
	v2 := uint64(r.Uint32())
	this.Number = &v2
	v3 := r.Uint32()
	this.ReplicaID = &v3
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMessage(r, 4)
	}
	return this
}

func NewPopulatedPreAccept(r randyMessage, easy bool) *PreAccept {
	this := &PreAccept{}
	v4 := r.Uint32()
	this.ReplicaID = &v4
	v5 := uint64(r.Uint32())
	this.InstanceID = &v5
	if r.Intn(10) != 0 {
		v6 := r.Intn(100)
		this.Cmds = make([][]byte, v6)
		for i := 0; i < v6; i++ {
			v7 := r.Intn(100)
			this.Cmds[i] = make([]byte, v7)
			for j := 0; j < v7; j++ {
				this.Cmds[i][j] = byte(r.Intn(256))
			}
		}
	}
	if r.Intn(10) != 0 {
		v8 := r.Intn(100)
		this.Deps = make([]uint64, v8)
		for i := 0; i < v8; i++ {
			this.Deps[i] = uint64(r.Uint32())
		}
	}
	this.Ballot = NewPopulatedBallot(r, easy)
	v9 := r.Uint32()
	this.From = &v9
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMessage(r, 7)
	}
	return this
}

func NewPopulatedPreAcceptOK(r randyMessage, easy bool) *PreAcceptOK {
	this := &PreAcceptOK{}
	v10 := r.Uint32()
	this.ReplicaID = &v10
	v11 := uint64(r.Uint32())
	this.InstanceID = &v11
	v12 := r.Uint32()
	this.From = &v12
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMessage(r, 4)
	}
	return this
}

func NewPopulatedPreAcceptReply(r randyMessage, easy bool) *PreAcceptReply {
	this := &PreAcceptReply{}
	v13 := r.Uint32()
	this.ReplicaID = &v13
	v14 := uint64(r.Uint32())
	this.InstanceID = &v14
	if r.Intn(10) != 0 {
		v15 := r.Intn(100)
		this.Deps = make([]uint64, v15)
		for i := 0; i < v15; i++ {
			this.Deps[i] = uint64(r.Uint32())
		}
	}
	this.Ballot = NewPopulatedBallot(r, easy)
	v16 := r.Uint32()
	this.From = &v16
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMessage(r, 6)
	}
	return this
}

func NewPopulatedAccept(r randyMessage, easy bool) *Accept {
	this := &Accept{}
	v17 := r.Uint32()
	this.ReplicaID = &v17
	v18 := uint64(r.Uint32())
	this.InstanceID = &v18
	if r.Intn(10) != 0 {
		v19 := r.Intn(100)
		this.Cmds = make([][]byte, v19)
		for i := 0; i < v19; i++ {
			v20 := r.Intn(100)
			this.Cmds[i] = make([]byte, v20)
			for j := 0; j < v20; j++ {
				this.Cmds[i][j] = byte(r.Intn(256))
			}
		}
	}
	if r.Intn(10) != 0 {
		v21 := r.Intn(100)
		this.Deps = make([]uint64, v21)
		for i := 0; i < v21; i++ {
			this.Deps[i] = uint64(r.Uint32())
		}
	}
	this.Ballot = NewPopulatedBallot(r, easy)
	v22 := r.Uint32()
	this.From = &v22
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMessage(r, 7)
	}
	return this
}

func NewPopulatedAcceptReply(r randyMessage, easy bool) *AcceptReply {
	this := &AcceptReply{}
	v23 := r.Uint32()
	this.ReplicaID = &v23
	v24 := uint64(r.Uint32())
	this.InstanceID = &v24
	this.Ballot = NewPopulatedBallot(r, easy)
	v25 := r.Uint32()
	this.From = &v25
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMessage(r, 5)
	}
	return this
}

func NewPopulatedPrepare(r randyMessage, easy bool) *Prepare {
	this := &Prepare{}
	v26 := r.Uint32()
	this.ReplicaID = &v26
	v27 := uint64(r.Uint32())
	this.InstanceID = &v27
	this.Ballot = NewPopulatedBallot(r, easy)
	v28 := r.Uint32()
	this.From = &v28
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMessage(r, 5)
	}
	return this
}

func NewPopulatedPrepareReply(r randyMessage, easy bool) *PrepareReply {
	this := &PrepareReply{}
	v29 := r.Uint32()
	this.ReplicaID = &v29
	v30 := uint64(r.Uint32())
	this.InstanceID = &v30
	v31 := State([]int32{1, 2, 3, 4, 5}[r.Intn(5)])
	this.State = &v31
	if r.Intn(10) != 0 {
		v32 := r.Intn(100)
		this.Cmds = make([][]byte, v32)
		for i := 0; i < v32; i++ {
			v33 := r.Intn(100)
			this.Cmds[i] = make([]byte, v33)
			for j := 0; j < v33; j++ {
				this.Cmds[i][j] = byte(r.Intn(256))
			}
		}
	}
	if r.Intn(10) != 0 {
		v34 := r.Intn(100)
		this.Deps = make([]uint64, v34)
		for i := 0; i < v34; i++ {
			this.Deps[i] = uint64(r.Uint32())
		}
	}
	this.Ballot = NewPopulatedBallot(r, easy)
	this.OriginalBallot = NewPopulatedBallot(r, easy)
	v35 := bool(r.Intn(2) == 0)
	this.IsFromLeader = &v35
	v36 := r.Uint32()
	this.From = &v36
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMessage(r, 10)
	}
	return this
}

func NewPopulatedCommit(r randyMessage, easy bool) *Commit {
	this := &Commit{}
	v37 := r.Uint32()
	this.ReplicaID = &v37
	v38 := uint64(r.Uint32())
	this.InstancdID = &v38
	if r.Intn(10) != 0 {
		v39 := r.Intn(100)
		this.Cmds = make([][]byte, v39)
		for i := 0; i < v39; i++ {
			v40 := r.Intn(100)
			this.Cmds[i] = make([]byte, v40)
			for j := 0; j < v40; j++ {
				this.Cmds[i][j] = byte(r.Intn(256))
			}
		}
	}
	if r.Intn(10) != 0 {
		v41 := r.Intn(100)
		this.Deps = make([]uint64, v41)
		for i := 0; i < v41; i++ {
			this.Deps[i] = uint64(r.Uint32())
		}
	}
	v42 := r.Uint32()
	this.From = &v42
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMessage(r, 6)
	}
	return this
}

type randyMessage interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneMessage(r randyMessage) rune {
	res := rune(r.Uint32() % 1112064)
	if 55296 <= res {
		res += 2047
	}
	return res
}
func randStringMessage(r randyMessage) string {
	v43 := r.Intn(100)
	tmps := make([]rune, v43)
	for i := 0; i < v43; i++ {
		tmps[i] = randUTF8RuneMessage(r)
	}
	return string(tmps)
}
func randUnrecognizedMessage(r randyMessage, maxFieldNumber int) (data []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		data = randFieldMessage(data, r, fieldNumber, wire)
	}
	return data
}
func randFieldMessage(data []byte, r randyMessage, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		data = encodeVarintPopulateMessage(data, uint64(key))
		v44 := r.Int63()
		if r.Intn(2) == 0 {
			v44 *= -1
		}
		data = encodeVarintPopulateMessage(data, uint64(v44))
	case 1:
		data = encodeVarintPopulateMessage(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		data = encodeVarintPopulateMessage(data, uint64(key))
		ll := r.Intn(100)
		data = encodeVarintPopulateMessage(data, uint64(ll))
		for j := 0; j < ll; j++ {
			data = append(data, byte(r.Intn(256)))
		}
	default:
		data = encodeVarintPopulateMessage(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return data
}
func encodeVarintPopulateMessage(data []byte, v uint64) []byte {
	for v >= 1<<7 {
		data = append(data, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	data = append(data, uint8(v))
	return data
}
func (m *Ballot) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Ballot) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Epoch != nil {
		data[i] = 0x8
		i++
		i = encodeVarintMessage(data, i, uint64(*m.Epoch))
	}
	if m.Number != nil {
		data[i] = 0x10
		i++
		i = encodeVarintMessage(data, i, uint64(*m.Number))
	}
	if m.ReplicaID != nil {
		data[i] = 0x18
		i++
		i = encodeVarintMessage(data, i, uint64(*m.ReplicaID))
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PreAccept) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PreAccept) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ReplicaID != nil {
		data[i] = 0x8
		i++
		i = encodeVarintMessage(data, i, uint64(*m.ReplicaID))
	}
	if m.InstanceID != nil {
		data[i] = 0x10
		i++
		i = encodeVarintMessage(data, i, uint64(*m.InstanceID))
	}
	if len(m.Cmds) > 0 {
		for _, b := range m.Cmds {
			data[i] = 0x1a
			i++
			i = encodeVarintMessage(data, i, uint64(len(b)))
			i += copy(data[i:], b)
		}
	}
	if len(m.Deps) > 0 {
		for _, num := range m.Deps {
			data[i] = 0x20
			i++
			i = encodeVarintMessage(data, i, uint64(num))
		}
	}
	if m.Ballot != nil {
		data[i] = 0x2a
		i++
		i = encodeVarintMessage(data, i, uint64(m.Ballot.Size()))
		n1, err := m.Ballot.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.From != nil {
		data[i] = 0x30
		i++
		i = encodeVarintMessage(data, i, uint64(*m.From))
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PreAcceptOK) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PreAcceptOK) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ReplicaID != nil {
		data[i] = 0x8
		i++
		i = encodeVarintMessage(data, i, uint64(*m.ReplicaID))
	}
	if m.InstanceID != nil {
		data[i] = 0x10
		i++
		i = encodeVarintMessage(data, i, uint64(*m.InstanceID))
	}
	if m.From != nil {
		data[i] = 0x18
		i++
		i = encodeVarintMessage(data, i, uint64(*m.From))
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PreAcceptReply) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PreAcceptReply) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ReplicaID != nil {
		data[i] = 0x8
		i++
		i = encodeVarintMessage(data, i, uint64(*m.ReplicaID))
	}
	if m.InstanceID != nil {
		data[i] = 0x10
		i++
		i = encodeVarintMessage(data, i, uint64(*m.InstanceID))
	}
	if len(m.Deps) > 0 {
		for _, num := range m.Deps {
			data[i] = 0x18
			i++
			i = encodeVarintMessage(data, i, uint64(num))
		}
	}
	if m.Ballot != nil {
		data[i] = 0x22
		i++
		i = encodeVarintMessage(data, i, uint64(m.Ballot.Size()))
		n2, err := m.Ballot.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.From != nil {
		data[i] = 0x28
		i++
		i = encodeVarintMessage(data, i, uint64(*m.From))
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Accept) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Accept) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ReplicaID != nil {
		data[i] = 0x8
		i++
		i = encodeVarintMessage(data, i, uint64(*m.ReplicaID))
	}
	if m.InstanceID != nil {
		data[i] = 0x10
		i++
		i = encodeVarintMessage(data, i, uint64(*m.InstanceID))
	}
	if len(m.Cmds) > 0 {
		for _, b := range m.Cmds {
			data[i] = 0x1a
			i++
			i = encodeVarintMessage(data, i, uint64(len(b)))
			i += copy(data[i:], b)
		}
	}
	if len(m.Deps) > 0 {
		for _, num := range m.Deps {
			data[i] = 0x20
			i++
			i = encodeVarintMessage(data, i, uint64(num))
		}
	}
	if m.Ballot != nil {
		data[i] = 0x2a
		i++
		i = encodeVarintMessage(data, i, uint64(m.Ballot.Size()))
		n3, err := m.Ballot.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.From != nil {
		data[i] = 0x30
		i++
		i = encodeVarintMessage(data, i, uint64(*m.From))
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AcceptReply) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *AcceptReply) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ReplicaID != nil {
		data[i] = 0x8
		i++
		i = encodeVarintMessage(data, i, uint64(*m.ReplicaID))
	}
	if m.InstanceID != nil {
		data[i] = 0x10
		i++
		i = encodeVarintMessage(data, i, uint64(*m.InstanceID))
	}
	if m.Ballot != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintMessage(data, i, uint64(m.Ballot.Size()))
		n4, err := m.Ballot.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.From != nil {
		data[i] = 0x20
		i++
		i = encodeVarintMessage(data, i, uint64(*m.From))
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Prepare) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Prepare) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ReplicaID != nil {
		data[i] = 0x8
		i++
		i = encodeVarintMessage(data, i, uint64(*m.ReplicaID))
	}
	if m.InstanceID != nil {
		data[i] = 0x10
		i++
		i = encodeVarintMessage(data, i, uint64(*m.InstanceID))
	}
	if m.Ballot != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintMessage(data, i, uint64(m.Ballot.Size()))
		n5, err := m.Ballot.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.From != nil {
		data[i] = 0x20
		i++
		i = encodeVarintMessage(data, i, uint64(*m.From))
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PrepareReply) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PrepareReply) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ReplicaID != nil {
		data[i] = 0x8
		i++
		i = encodeVarintMessage(data, i, uint64(*m.ReplicaID))
	}
	if m.InstanceID != nil {
		data[i] = 0x10
		i++
		i = encodeVarintMessage(data, i, uint64(*m.InstanceID))
	}
	if m.State != nil {
		data[i] = 0x18
		i++
		i = encodeVarintMessage(data, i, uint64(*m.State))
	}
	if len(m.Cmds) > 0 {
		for _, b := range m.Cmds {
			data[i] = 0x22
			i++
			i = encodeVarintMessage(data, i, uint64(len(b)))
			i += copy(data[i:], b)
		}
	}
	if len(m.Deps) > 0 {
		for _, num := range m.Deps {
			data[i] = 0x28
			i++
			i = encodeVarintMessage(data, i, uint64(num))
		}
	}
	if m.Ballot != nil {
		data[i] = 0x32
		i++
		i = encodeVarintMessage(data, i, uint64(m.Ballot.Size()))
		n6, err := m.Ballot.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.OriginalBallot != nil {
		data[i] = 0x3a
		i++
		i = encodeVarintMessage(data, i, uint64(m.OriginalBallot.Size()))
		n7, err := m.OriginalBallot.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.IsFromLeader != nil {
		data[i] = 0x40
		i++
		if *m.IsFromLeader {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.From != nil {
		data[i] = 0x48
		i++
		i = encodeVarintMessage(data, i, uint64(*m.From))
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Commit) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Commit) MarshalTo(data []byte) (n int, err error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ReplicaID != nil {
		data[i] = 0x8
		i++
		i = encodeVarintMessage(data, i, uint64(*m.ReplicaID))
	}
	if m.InstancdID != nil {
		data[i] = 0x10
		i++
		i = encodeVarintMessage(data, i, uint64(*m.InstancdID))
	}
	if len(m.Cmds) > 0 {
		for _, b := range m.Cmds {
			data[i] = 0x1a
			i++
			i = encodeVarintMessage(data, i, uint64(len(b)))
			i += copy(data[i:], b)
		}
	}
	if len(m.Deps) > 0 {
		for _, num := range m.Deps {
			data[i] = 0x20
			i++
			i = encodeVarintMessage(data, i, uint64(num))
		}
	}
	if m.From != nil {
		data[i] = 0x28
		i++
		i = encodeVarintMessage(data, i, uint64(*m.From))
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeFixed64Message(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Message(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintMessage(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (this *Ballot) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&protobuf.Ballot{` +
		`Epoch:` + valueToGoStringMessage(this.Epoch, "uint32"),
		`Number:` + valueToGoStringMessage(this.Number, "uint64"),
		`ReplicaID:` + valueToGoStringMessage(this.ReplicaID, "uint32"),
		`XXX_unrecognized:` + fmt2.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func (this *PreAccept) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&protobuf.PreAccept{` +
		`ReplicaID:` + valueToGoStringMessage(this.ReplicaID, "uint32"),
		`InstanceID:` + valueToGoStringMessage(this.InstanceID, "uint64"),
		`Cmds:` + fmt2.Sprintf("%#v", this.Cmds),
		`Deps:` + fmt2.Sprintf("%#v", this.Deps),
		`Ballot:` + fmt2.Sprintf("%#v", this.Ballot),
		`From:` + valueToGoStringMessage(this.From, "uint32"),
		`XXX_unrecognized:` + fmt2.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func (this *PreAcceptOK) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&protobuf.PreAcceptOK{` +
		`ReplicaID:` + valueToGoStringMessage(this.ReplicaID, "uint32"),
		`InstanceID:` + valueToGoStringMessage(this.InstanceID, "uint64"),
		`From:` + valueToGoStringMessage(this.From, "uint32"),
		`XXX_unrecognized:` + fmt2.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func (this *PreAcceptReply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&protobuf.PreAcceptReply{` +
		`ReplicaID:` + valueToGoStringMessage(this.ReplicaID, "uint32"),
		`InstanceID:` + valueToGoStringMessage(this.InstanceID, "uint64"),
		`Deps:` + fmt2.Sprintf("%#v", this.Deps),
		`Ballot:` + fmt2.Sprintf("%#v", this.Ballot),
		`From:` + valueToGoStringMessage(this.From, "uint32"),
		`XXX_unrecognized:` + fmt2.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func (this *Accept) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&protobuf.Accept{` +
		`ReplicaID:` + valueToGoStringMessage(this.ReplicaID, "uint32"),
		`InstanceID:` + valueToGoStringMessage(this.InstanceID, "uint64"),
		`Cmds:` + fmt2.Sprintf("%#v", this.Cmds),
		`Deps:` + fmt2.Sprintf("%#v", this.Deps),
		`Ballot:` + fmt2.Sprintf("%#v", this.Ballot),
		`From:` + valueToGoStringMessage(this.From, "uint32"),
		`XXX_unrecognized:` + fmt2.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func (this *AcceptReply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&protobuf.AcceptReply{` +
		`ReplicaID:` + valueToGoStringMessage(this.ReplicaID, "uint32"),
		`InstanceID:` + valueToGoStringMessage(this.InstanceID, "uint64"),
		`Ballot:` + fmt2.Sprintf("%#v", this.Ballot),
		`From:` + valueToGoStringMessage(this.From, "uint32"),
		`XXX_unrecognized:` + fmt2.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func (this *Prepare) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&protobuf.Prepare{` +
		`ReplicaID:` + valueToGoStringMessage(this.ReplicaID, "uint32"),
		`InstanceID:` + valueToGoStringMessage(this.InstanceID, "uint64"),
		`Ballot:` + fmt2.Sprintf("%#v", this.Ballot),
		`From:` + valueToGoStringMessage(this.From, "uint32"),
		`XXX_unrecognized:` + fmt2.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func (this *PrepareReply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&protobuf.PrepareReply{` +
		`ReplicaID:` + valueToGoStringMessage(this.ReplicaID, "uint32"),
		`InstanceID:` + valueToGoStringMessage(this.InstanceID, "uint64"),
		`State:` + valueToGoStringMessage(this.State, "protobuf.State"),
		`Cmds:` + fmt2.Sprintf("%#v", this.Cmds),
		`Deps:` + fmt2.Sprintf("%#v", this.Deps),
		`Ballot:` + fmt2.Sprintf("%#v", this.Ballot),
		`OriginalBallot:` + fmt2.Sprintf("%#v", this.OriginalBallot),
		`IsFromLeader:` + valueToGoStringMessage(this.IsFromLeader, "bool"),
		`From:` + valueToGoStringMessage(this.From, "uint32"),
		`XXX_unrecognized:` + fmt2.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func (this *Commit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings1.Join([]string{`&protobuf.Commit{` +
		`ReplicaID:` + valueToGoStringMessage(this.ReplicaID, "uint32"),
		`InstancdID:` + valueToGoStringMessage(this.InstancdID, "uint64"),
		`Cmds:` + fmt2.Sprintf("%#v", this.Cmds),
		`Deps:` + fmt2.Sprintf("%#v", this.Deps),
		`From:` + valueToGoStringMessage(this.From, "uint32"),
		`XXX_unrecognized:` + fmt2.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func valueToGoStringMessage(v interface{}, typ string) string {
	rv := reflect1.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect1.Indirect(rv).Interface()
	return fmt2.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringMessage(e map[int32]github_com_gogo_protobuf_proto1.Extension) string {
	if e == nil {
		return "nil"
	}
	s := "map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings1.Join(ss, ",") + "}"
	return s
}
func (this *Ballot) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt3.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Ballot)
	if !ok {
		return fmt3.Errorf("that is not of type *Ballot")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt3.Errorf("that is type *Ballot but is nil && this != nil")
	} else if this == nil {
		return fmt3.Errorf("that is type *Ballotbut is not nil && this == nil")
	}
	if this.Epoch != nil && that1.Epoch != nil {
		if *this.Epoch != *that1.Epoch {
			return fmt3.Errorf("Epoch this(%v) Not Equal that(%v)", *this.Epoch, *that1.Epoch)
		}
	} else if this.Epoch != nil {
		return fmt3.Errorf("this.Epoch == nil && that.Epoch != nil")
	} else if that1.Epoch != nil {
		return fmt3.Errorf("Epoch this(%v) Not Equal that(%v)", this.Epoch, that1.Epoch)
	}
	if this.Number != nil && that1.Number != nil {
		if *this.Number != *that1.Number {
			return fmt3.Errorf("Number this(%v) Not Equal that(%v)", *this.Number, *that1.Number)
		}
	} else if this.Number != nil {
		return fmt3.Errorf("this.Number == nil && that.Number != nil")
	} else if that1.Number != nil {
		return fmt3.Errorf("Number this(%v) Not Equal that(%v)", this.Number, that1.Number)
	}
	if this.ReplicaID != nil && that1.ReplicaID != nil {
		if *this.ReplicaID != *that1.ReplicaID {
			return fmt3.Errorf("ReplicaID this(%v) Not Equal that(%v)", *this.ReplicaID, *that1.ReplicaID)
		}
	} else if this.ReplicaID != nil {
		return fmt3.Errorf("this.ReplicaID == nil && that.ReplicaID != nil")
	} else if that1.ReplicaID != nil {
		return fmt3.Errorf("ReplicaID this(%v) Not Equal that(%v)", this.ReplicaID, that1.ReplicaID)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt3.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Ballot) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Ballot)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Epoch != nil && that1.Epoch != nil {
		if *this.Epoch != *that1.Epoch {
			return false
		}
	} else if this.Epoch != nil {
		return false
	} else if that1.Epoch != nil {
		return false
	}
	if this.Number != nil && that1.Number != nil {
		if *this.Number != *that1.Number {
			return false
		}
	} else if this.Number != nil {
		return false
	} else if that1.Number != nil {
		return false
	}
	if this.ReplicaID != nil && that1.ReplicaID != nil {
		if *this.ReplicaID != *that1.ReplicaID {
			return false
		}
	} else if this.ReplicaID != nil {
		return false
	} else if that1.ReplicaID != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *PreAccept) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt3.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*PreAccept)
	if !ok {
		return fmt3.Errorf("that is not of type *PreAccept")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt3.Errorf("that is type *PreAccept but is nil && this != nil")
	} else if this == nil {
		return fmt3.Errorf("that is type *PreAcceptbut is not nil && this == nil")
	}
	if this.ReplicaID != nil && that1.ReplicaID != nil {
		if *this.ReplicaID != *that1.ReplicaID {
			return fmt3.Errorf("ReplicaID this(%v) Not Equal that(%v)", *this.ReplicaID, *that1.ReplicaID)
		}
	} else if this.ReplicaID != nil {
		return fmt3.Errorf("this.ReplicaID == nil && that.ReplicaID != nil")
	} else if that1.ReplicaID != nil {
		return fmt3.Errorf("ReplicaID this(%v) Not Equal that(%v)", this.ReplicaID, that1.ReplicaID)
	}
	if this.InstanceID != nil && that1.InstanceID != nil {
		if *this.InstanceID != *that1.InstanceID {
			return fmt3.Errorf("InstanceID this(%v) Not Equal that(%v)", *this.InstanceID, *that1.InstanceID)
		}
	} else if this.InstanceID != nil {
		return fmt3.Errorf("this.InstanceID == nil && that.InstanceID != nil")
	} else if that1.InstanceID != nil {
		return fmt3.Errorf("InstanceID this(%v) Not Equal that(%v)", this.InstanceID, that1.InstanceID)
	}
	if len(this.Cmds) != len(that1.Cmds) {
		return fmt3.Errorf("Cmds this(%v) Not Equal that(%v)", len(this.Cmds), len(that1.Cmds))
	}
	for i := range this.Cmds {
		if !bytes.Equal(this.Cmds[i], that1.Cmds[i]) {
			return fmt3.Errorf("Cmds this[%v](%v) Not Equal that[%v](%v)", i, this.Cmds[i], i, that1.Cmds[i])
		}
	}
	if len(this.Deps) != len(that1.Deps) {
		return fmt3.Errorf("Deps this(%v) Not Equal that(%v)", len(this.Deps), len(that1.Deps))
	}
	for i := range this.Deps {
		if this.Deps[i] != that1.Deps[i] {
			return fmt3.Errorf("Deps this[%v](%v) Not Equal that[%v](%v)", i, this.Deps[i], i, that1.Deps[i])
		}
	}
	if !this.Ballot.Equal(that1.Ballot) {
		return fmt3.Errorf("Ballot this(%v) Not Equal that(%v)", this.Ballot, that1.Ballot)
	}
	if this.From != nil && that1.From != nil {
		if *this.From != *that1.From {
			return fmt3.Errorf("From this(%v) Not Equal that(%v)", *this.From, *that1.From)
		}
	} else if this.From != nil {
		return fmt3.Errorf("this.From == nil && that.From != nil")
	} else if that1.From != nil {
		return fmt3.Errorf("From this(%v) Not Equal that(%v)", this.From, that1.From)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt3.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *PreAccept) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PreAccept)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ReplicaID != nil && that1.ReplicaID != nil {
		if *this.ReplicaID != *that1.ReplicaID {
			return false
		}
	} else if this.ReplicaID != nil {
		return false
	} else if that1.ReplicaID != nil {
		return false
	}
	if this.InstanceID != nil && that1.InstanceID != nil {
		if *this.InstanceID != *that1.InstanceID {
			return false
		}
	} else if this.InstanceID != nil {
		return false
	} else if that1.InstanceID != nil {
		return false
	}
	if len(this.Cmds) != len(that1.Cmds) {
		return false
	}
	for i := range this.Cmds {
		if !bytes.Equal(this.Cmds[i], that1.Cmds[i]) {
			return false
		}
	}
	if len(this.Deps) != len(that1.Deps) {
		return false
	}
	for i := range this.Deps {
		if this.Deps[i] != that1.Deps[i] {
			return false
		}
	}
	if !this.Ballot.Equal(that1.Ballot) {
		return false
	}
	if this.From != nil && that1.From != nil {
		if *this.From != *that1.From {
			return false
		}
	} else if this.From != nil {
		return false
	} else if that1.From != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *PreAcceptOK) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt3.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*PreAcceptOK)
	if !ok {
		return fmt3.Errorf("that is not of type *PreAcceptOK")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt3.Errorf("that is type *PreAcceptOK but is nil && this != nil")
	} else if this == nil {
		return fmt3.Errorf("that is type *PreAcceptOKbut is not nil && this == nil")
	}
	if this.ReplicaID != nil && that1.ReplicaID != nil {
		if *this.ReplicaID != *that1.ReplicaID {
			return fmt3.Errorf("ReplicaID this(%v) Not Equal that(%v)", *this.ReplicaID, *that1.ReplicaID)
		}
	} else if this.ReplicaID != nil {
		return fmt3.Errorf("this.ReplicaID == nil && that.ReplicaID != nil")
	} else if that1.ReplicaID != nil {
		return fmt3.Errorf("ReplicaID this(%v) Not Equal that(%v)", this.ReplicaID, that1.ReplicaID)
	}
	if this.InstanceID != nil && that1.InstanceID != nil {
		if *this.InstanceID != *that1.InstanceID {
			return fmt3.Errorf("InstanceID this(%v) Not Equal that(%v)", *this.InstanceID, *that1.InstanceID)
		}
	} else if this.InstanceID != nil {
		return fmt3.Errorf("this.InstanceID == nil && that.InstanceID != nil")
	} else if that1.InstanceID != nil {
		return fmt3.Errorf("InstanceID this(%v) Not Equal that(%v)", this.InstanceID, that1.InstanceID)
	}
	if this.From != nil && that1.From != nil {
		if *this.From != *that1.From {
			return fmt3.Errorf("From this(%v) Not Equal that(%v)", *this.From, *that1.From)
		}
	} else if this.From != nil {
		return fmt3.Errorf("this.From == nil && that.From != nil")
	} else if that1.From != nil {
		return fmt3.Errorf("From this(%v) Not Equal that(%v)", this.From, that1.From)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt3.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *PreAcceptOK) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PreAcceptOK)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ReplicaID != nil && that1.ReplicaID != nil {
		if *this.ReplicaID != *that1.ReplicaID {
			return false
		}
	} else if this.ReplicaID != nil {
		return false
	} else if that1.ReplicaID != nil {
		return false
	}
	if this.InstanceID != nil && that1.InstanceID != nil {
		if *this.InstanceID != *that1.InstanceID {
			return false
		}
	} else if this.InstanceID != nil {
		return false
	} else if that1.InstanceID != nil {
		return false
	}
	if this.From != nil && that1.From != nil {
		if *this.From != *that1.From {
			return false
		}
	} else if this.From != nil {
		return false
	} else if that1.From != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *PreAcceptReply) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt3.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*PreAcceptReply)
	if !ok {
		return fmt3.Errorf("that is not of type *PreAcceptReply")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt3.Errorf("that is type *PreAcceptReply but is nil && this != nil")
	} else if this == nil {
		return fmt3.Errorf("that is type *PreAcceptReplybut is not nil && this == nil")
	}
	if this.ReplicaID != nil && that1.ReplicaID != nil {
		if *this.ReplicaID != *that1.ReplicaID {
			return fmt3.Errorf("ReplicaID this(%v) Not Equal that(%v)", *this.ReplicaID, *that1.ReplicaID)
		}
	} else if this.ReplicaID != nil {
		return fmt3.Errorf("this.ReplicaID == nil && that.ReplicaID != nil")
	} else if that1.ReplicaID != nil {
		return fmt3.Errorf("ReplicaID this(%v) Not Equal that(%v)", this.ReplicaID, that1.ReplicaID)
	}
	if this.InstanceID != nil && that1.InstanceID != nil {
		if *this.InstanceID != *that1.InstanceID {
			return fmt3.Errorf("InstanceID this(%v) Not Equal that(%v)", *this.InstanceID, *that1.InstanceID)
		}
	} else if this.InstanceID != nil {
		return fmt3.Errorf("this.InstanceID == nil && that.InstanceID != nil")
	} else if that1.InstanceID != nil {
		return fmt3.Errorf("InstanceID this(%v) Not Equal that(%v)", this.InstanceID, that1.InstanceID)
	}
	if len(this.Deps) != len(that1.Deps) {
		return fmt3.Errorf("Deps this(%v) Not Equal that(%v)", len(this.Deps), len(that1.Deps))
	}
	for i := range this.Deps {
		if this.Deps[i] != that1.Deps[i] {
			return fmt3.Errorf("Deps this[%v](%v) Not Equal that[%v](%v)", i, this.Deps[i], i, that1.Deps[i])
		}
	}
	if !this.Ballot.Equal(that1.Ballot) {
		return fmt3.Errorf("Ballot this(%v) Not Equal that(%v)", this.Ballot, that1.Ballot)
	}
	if this.From != nil && that1.From != nil {
		if *this.From != *that1.From {
			return fmt3.Errorf("From this(%v) Not Equal that(%v)", *this.From, *that1.From)
		}
	} else if this.From != nil {
		return fmt3.Errorf("this.From == nil && that.From != nil")
	} else if that1.From != nil {
		return fmt3.Errorf("From this(%v) Not Equal that(%v)", this.From, that1.From)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt3.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *PreAcceptReply) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PreAcceptReply)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ReplicaID != nil && that1.ReplicaID != nil {
		if *this.ReplicaID != *that1.ReplicaID {
			return false
		}
	} else if this.ReplicaID != nil {
		return false
	} else if that1.ReplicaID != nil {
		return false
	}
	if this.InstanceID != nil && that1.InstanceID != nil {
		if *this.InstanceID != *that1.InstanceID {
			return false
		}
	} else if this.InstanceID != nil {
		return false
	} else if that1.InstanceID != nil {
		return false
	}
	if len(this.Deps) != len(that1.Deps) {
		return false
	}
	for i := range this.Deps {
		if this.Deps[i] != that1.Deps[i] {
			return false
		}
	}
	if !this.Ballot.Equal(that1.Ballot) {
		return false
	}
	if this.From != nil && that1.From != nil {
		if *this.From != *that1.From {
			return false
		}
	} else if this.From != nil {
		return false
	} else if that1.From != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Accept) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt3.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Accept)
	if !ok {
		return fmt3.Errorf("that is not of type *Accept")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt3.Errorf("that is type *Accept but is nil && this != nil")
	} else if this == nil {
		return fmt3.Errorf("that is type *Acceptbut is not nil && this == nil")
	}
	if this.ReplicaID != nil && that1.ReplicaID != nil {
		if *this.ReplicaID != *that1.ReplicaID {
			return fmt3.Errorf("ReplicaID this(%v) Not Equal that(%v)", *this.ReplicaID, *that1.ReplicaID)
		}
	} else if this.ReplicaID != nil {
		return fmt3.Errorf("this.ReplicaID == nil && that.ReplicaID != nil")
	} else if that1.ReplicaID != nil {
		return fmt3.Errorf("ReplicaID this(%v) Not Equal that(%v)", this.ReplicaID, that1.ReplicaID)
	}
	if this.InstanceID != nil && that1.InstanceID != nil {
		if *this.InstanceID != *that1.InstanceID {
			return fmt3.Errorf("InstanceID this(%v) Not Equal that(%v)", *this.InstanceID, *that1.InstanceID)
		}
	} else if this.InstanceID != nil {
		return fmt3.Errorf("this.InstanceID == nil && that.InstanceID != nil")
	} else if that1.InstanceID != nil {
		return fmt3.Errorf("InstanceID this(%v) Not Equal that(%v)", this.InstanceID, that1.InstanceID)
	}
	if len(this.Cmds) != len(that1.Cmds) {
		return fmt3.Errorf("Cmds this(%v) Not Equal that(%v)", len(this.Cmds), len(that1.Cmds))
	}
	for i := range this.Cmds {
		if !bytes.Equal(this.Cmds[i], that1.Cmds[i]) {
			return fmt3.Errorf("Cmds this[%v](%v) Not Equal that[%v](%v)", i, this.Cmds[i], i, that1.Cmds[i])
		}
	}
	if len(this.Deps) != len(that1.Deps) {
		return fmt3.Errorf("Deps this(%v) Not Equal that(%v)", len(this.Deps), len(that1.Deps))
	}
	for i := range this.Deps {
		if this.Deps[i] != that1.Deps[i] {
			return fmt3.Errorf("Deps this[%v](%v) Not Equal that[%v](%v)", i, this.Deps[i], i, that1.Deps[i])
		}
	}
	if !this.Ballot.Equal(that1.Ballot) {
		return fmt3.Errorf("Ballot this(%v) Not Equal that(%v)", this.Ballot, that1.Ballot)
	}
	if this.From != nil && that1.From != nil {
		if *this.From != *that1.From {
			return fmt3.Errorf("From this(%v) Not Equal that(%v)", *this.From, *that1.From)
		}
	} else if this.From != nil {
		return fmt3.Errorf("this.From == nil && that.From != nil")
	} else if that1.From != nil {
		return fmt3.Errorf("From this(%v) Not Equal that(%v)", this.From, that1.From)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt3.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Accept) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Accept)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ReplicaID != nil && that1.ReplicaID != nil {
		if *this.ReplicaID != *that1.ReplicaID {
			return false
		}
	} else if this.ReplicaID != nil {
		return false
	} else if that1.ReplicaID != nil {
		return false
	}
	if this.InstanceID != nil && that1.InstanceID != nil {
		if *this.InstanceID != *that1.InstanceID {
			return false
		}
	} else if this.InstanceID != nil {
		return false
	} else if that1.InstanceID != nil {
		return false
	}
	if len(this.Cmds) != len(that1.Cmds) {
		return false
	}
	for i := range this.Cmds {
		if !bytes.Equal(this.Cmds[i], that1.Cmds[i]) {
			return false
		}
	}
	if len(this.Deps) != len(that1.Deps) {
		return false
	}
	for i := range this.Deps {
		if this.Deps[i] != that1.Deps[i] {
			return false
		}
	}
	if !this.Ballot.Equal(that1.Ballot) {
		return false
	}
	if this.From != nil && that1.From != nil {
		if *this.From != *that1.From {
			return false
		}
	} else if this.From != nil {
		return false
	} else if that1.From != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *AcceptReply) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt3.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AcceptReply)
	if !ok {
		return fmt3.Errorf("that is not of type *AcceptReply")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt3.Errorf("that is type *AcceptReply but is nil && this != nil")
	} else if this == nil {
		return fmt3.Errorf("that is type *AcceptReplybut is not nil && this == nil")
	}
	if this.ReplicaID != nil && that1.ReplicaID != nil {
		if *this.ReplicaID != *that1.ReplicaID {
			return fmt3.Errorf("ReplicaID this(%v) Not Equal that(%v)", *this.ReplicaID, *that1.ReplicaID)
		}
	} else if this.ReplicaID != nil {
		return fmt3.Errorf("this.ReplicaID == nil && that.ReplicaID != nil")
	} else if that1.ReplicaID != nil {
		return fmt3.Errorf("ReplicaID this(%v) Not Equal that(%v)", this.ReplicaID, that1.ReplicaID)
	}
	if this.InstanceID != nil && that1.InstanceID != nil {
		if *this.InstanceID != *that1.InstanceID {
			return fmt3.Errorf("InstanceID this(%v) Not Equal that(%v)", *this.InstanceID, *that1.InstanceID)
		}
	} else if this.InstanceID != nil {
		return fmt3.Errorf("this.InstanceID == nil && that.InstanceID != nil")
	} else if that1.InstanceID != nil {
		return fmt3.Errorf("InstanceID this(%v) Not Equal that(%v)", this.InstanceID, that1.InstanceID)
	}
	if !this.Ballot.Equal(that1.Ballot) {
		return fmt3.Errorf("Ballot this(%v) Not Equal that(%v)", this.Ballot, that1.Ballot)
	}
	if this.From != nil && that1.From != nil {
		if *this.From != *that1.From {
			return fmt3.Errorf("From this(%v) Not Equal that(%v)", *this.From, *that1.From)
		}
	} else if this.From != nil {
		return fmt3.Errorf("this.From == nil && that.From != nil")
	} else if that1.From != nil {
		return fmt3.Errorf("From this(%v) Not Equal that(%v)", this.From, that1.From)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt3.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *AcceptReply) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AcceptReply)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ReplicaID != nil && that1.ReplicaID != nil {
		if *this.ReplicaID != *that1.ReplicaID {
			return false
		}
	} else if this.ReplicaID != nil {
		return false
	} else if that1.ReplicaID != nil {
		return false
	}
	if this.InstanceID != nil && that1.InstanceID != nil {
		if *this.InstanceID != *that1.InstanceID {
			return false
		}
	} else if this.InstanceID != nil {
		return false
	} else if that1.InstanceID != nil {
		return false
	}
	if !this.Ballot.Equal(that1.Ballot) {
		return false
	}
	if this.From != nil && that1.From != nil {
		if *this.From != *that1.From {
			return false
		}
	} else if this.From != nil {
		return false
	} else if that1.From != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Prepare) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt3.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Prepare)
	if !ok {
		return fmt3.Errorf("that is not of type *Prepare")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt3.Errorf("that is type *Prepare but is nil && this != nil")
	} else if this == nil {
		return fmt3.Errorf("that is type *Preparebut is not nil && this == nil")
	}
	if this.ReplicaID != nil && that1.ReplicaID != nil {
		if *this.ReplicaID != *that1.ReplicaID {
			return fmt3.Errorf("ReplicaID this(%v) Not Equal that(%v)", *this.ReplicaID, *that1.ReplicaID)
		}
	} else if this.ReplicaID != nil {
		return fmt3.Errorf("this.ReplicaID == nil && that.ReplicaID != nil")
	} else if that1.ReplicaID != nil {
		return fmt3.Errorf("ReplicaID this(%v) Not Equal that(%v)", this.ReplicaID, that1.ReplicaID)
	}
	if this.InstanceID != nil && that1.InstanceID != nil {
		if *this.InstanceID != *that1.InstanceID {
			return fmt3.Errorf("InstanceID this(%v) Not Equal that(%v)", *this.InstanceID, *that1.InstanceID)
		}
	} else if this.InstanceID != nil {
		return fmt3.Errorf("this.InstanceID == nil && that.InstanceID != nil")
	} else if that1.InstanceID != nil {
		return fmt3.Errorf("InstanceID this(%v) Not Equal that(%v)", this.InstanceID, that1.InstanceID)
	}
	if !this.Ballot.Equal(that1.Ballot) {
		return fmt3.Errorf("Ballot this(%v) Not Equal that(%v)", this.Ballot, that1.Ballot)
	}
	if this.From != nil && that1.From != nil {
		if *this.From != *that1.From {
			return fmt3.Errorf("From this(%v) Not Equal that(%v)", *this.From, *that1.From)
		}
	} else if this.From != nil {
		return fmt3.Errorf("this.From == nil && that.From != nil")
	} else if that1.From != nil {
		return fmt3.Errorf("From this(%v) Not Equal that(%v)", this.From, that1.From)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt3.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Prepare) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Prepare)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ReplicaID != nil && that1.ReplicaID != nil {
		if *this.ReplicaID != *that1.ReplicaID {
			return false
		}
	} else if this.ReplicaID != nil {
		return false
	} else if that1.ReplicaID != nil {
		return false
	}
	if this.InstanceID != nil && that1.InstanceID != nil {
		if *this.InstanceID != *that1.InstanceID {
			return false
		}
	} else if this.InstanceID != nil {
		return false
	} else if that1.InstanceID != nil {
		return false
	}
	if !this.Ballot.Equal(that1.Ballot) {
		return false
	}
	if this.From != nil && that1.From != nil {
		if *this.From != *that1.From {
			return false
		}
	} else if this.From != nil {
		return false
	} else if that1.From != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *PrepareReply) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt3.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*PrepareReply)
	if !ok {
		return fmt3.Errorf("that is not of type *PrepareReply")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt3.Errorf("that is type *PrepareReply but is nil && this != nil")
	} else if this == nil {
		return fmt3.Errorf("that is type *PrepareReplybut is not nil && this == nil")
	}
	if this.ReplicaID != nil && that1.ReplicaID != nil {
		if *this.ReplicaID != *that1.ReplicaID {
			return fmt3.Errorf("ReplicaID this(%v) Not Equal that(%v)", *this.ReplicaID, *that1.ReplicaID)
		}
	} else if this.ReplicaID != nil {
		return fmt3.Errorf("this.ReplicaID == nil && that.ReplicaID != nil")
	} else if that1.ReplicaID != nil {
		return fmt3.Errorf("ReplicaID this(%v) Not Equal that(%v)", this.ReplicaID, that1.ReplicaID)
	}
	if this.InstanceID != nil && that1.InstanceID != nil {
		if *this.InstanceID != *that1.InstanceID {
			return fmt3.Errorf("InstanceID this(%v) Not Equal that(%v)", *this.InstanceID, *that1.InstanceID)
		}
	} else if this.InstanceID != nil {
		return fmt3.Errorf("this.InstanceID == nil && that.InstanceID != nil")
	} else if that1.InstanceID != nil {
		return fmt3.Errorf("InstanceID this(%v) Not Equal that(%v)", this.InstanceID, that1.InstanceID)
	}
	if this.State != nil && that1.State != nil {
		if *this.State != *that1.State {
			return fmt3.Errorf("State this(%v) Not Equal that(%v)", *this.State, *that1.State)
		}
	} else if this.State != nil {
		return fmt3.Errorf("this.State == nil && that.State != nil")
	} else if that1.State != nil {
		return fmt3.Errorf("State this(%v) Not Equal that(%v)", this.State, that1.State)
	}
	if len(this.Cmds) != len(that1.Cmds) {
		return fmt3.Errorf("Cmds this(%v) Not Equal that(%v)", len(this.Cmds), len(that1.Cmds))
	}
	for i := range this.Cmds {
		if !bytes.Equal(this.Cmds[i], that1.Cmds[i]) {
			return fmt3.Errorf("Cmds this[%v](%v) Not Equal that[%v](%v)", i, this.Cmds[i], i, that1.Cmds[i])
		}
	}
	if len(this.Deps) != len(that1.Deps) {
		return fmt3.Errorf("Deps this(%v) Not Equal that(%v)", len(this.Deps), len(that1.Deps))
	}
	for i := range this.Deps {
		if this.Deps[i] != that1.Deps[i] {
			return fmt3.Errorf("Deps this[%v](%v) Not Equal that[%v](%v)", i, this.Deps[i], i, that1.Deps[i])
		}
	}
	if !this.Ballot.Equal(that1.Ballot) {
		return fmt3.Errorf("Ballot this(%v) Not Equal that(%v)", this.Ballot, that1.Ballot)
	}
	if !this.OriginalBallot.Equal(that1.OriginalBallot) {
		return fmt3.Errorf("OriginalBallot this(%v) Not Equal that(%v)", this.OriginalBallot, that1.OriginalBallot)
	}
	if this.IsFromLeader != nil && that1.IsFromLeader != nil {
		if *this.IsFromLeader != *that1.IsFromLeader {
			return fmt3.Errorf("IsFromLeader this(%v) Not Equal that(%v)", *this.IsFromLeader, *that1.IsFromLeader)
		}
	} else if this.IsFromLeader != nil {
		return fmt3.Errorf("this.IsFromLeader == nil && that.IsFromLeader != nil")
	} else if that1.IsFromLeader != nil {
		return fmt3.Errorf("IsFromLeader this(%v) Not Equal that(%v)", this.IsFromLeader, that1.IsFromLeader)
	}
	if this.From != nil && that1.From != nil {
		if *this.From != *that1.From {
			return fmt3.Errorf("From this(%v) Not Equal that(%v)", *this.From, *that1.From)
		}
	} else if this.From != nil {
		return fmt3.Errorf("this.From == nil && that.From != nil")
	} else if that1.From != nil {
		return fmt3.Errorf("From this(%v) Not Equal that(%v)", this.From, that1.From)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt3.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *PrepareReply) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PrepareReply)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ReplicaID != nil && that1.ReplicaID != nil {
		if *this.ReplicaID != *that1.ReplicaID {
			return false
		}
	} else if this.ReplicaID != nil {
		return false
	} else if that1.ReplicaID != nil {
		return false
	}
	if this.InstanceID != nil && that1.InstanceID != nil {
		if *this.InstanceID != *that1.InstanceID {
			return false
		}
	} else if this.InstanceID != nil {
		return false
	} else if that1.InstanceID != nil {
		return false
	}
	if this.State != nil && that1.State != nil {
		if *this.State != *that1.State {
			return false
		}
	} else if this.State != nil {
		return false
	} else if that1.State != nil {
		return false
	}
	if len(this.Cmds) != len(that1.Cmds) {
		return false
	}
	for i := range this.Cmds {
		if !bytes.Equal(this.Cmds[i], that1.Cmds[i]) {
			return false
		}
	}
	if len(this.Deps) != len(that1.Deps) {
		return false
	}
	for i := range this.Deps {
		if this.Deps[i] != that1.Deps[i] {
			return false
		}
	}
	if !this.Ballot.Equal(that1.Ballot) {
		return false
	}
	if !this.OriginalBallot.Equal(that1.OriginalBallot) {
		return false
	}
	if this.IsFromLeader != nil && that1.IsFromLeader != nil {
		if *this.IsFromLeader != *that1.IsFromLeader {
			return false
		}
	} else if this.IsFromLeader != nil {
		return false
	} else if that1.IsFromLeader != nil {
		return false
	}
	if this.From != nil && that1.From != nil {
		if *this.From != *that1.From {
			return false
		}
	} else if this.From != nil {
		return false
	} else if that1.From != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Commit) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt3.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Commit)
	if !ok {
		return fmt3.Errorf("that is not of type *Commit")
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt3.Errorf("that is type *Commit but is nil && this != nil")
	} else if this == nil {
		return fmt3.Errorf("that is type *Commitbut is not nil && this == nil")
	}
	if this.ReplicaID != nil && that1.ReplicaID != nil {
		if *this.ReplicaID != *that1.ReplicaID {
			return fmt3.Errorf("ReplicaID this(%v) Not Equal that(%v)", *this.ReplicaID, *that1.ReplicaID)
		}
	} else if this.ReplicaID != nil {
		return fmt3.Errorf("this.ReplicaID == nil && that.ReplicaID != nil")
	} else if that1.ReplicaID != nil {
		return fmt3.Errorf("ReplicaID this(%v) Not Equal that(%v)", this.ReplicaID, that1.ReplicaID)
	}
	if this.InstancdID != nil && that1.InstancdID != nil {
		if *this.InstancdID != *that1.InstancdID {
			return fmt3.Errorf("InstancdID this(%v) Not Equal that(%v)", *this.InstancdID, *that1.InstancdID)
		}
	} else if this.InstancdID != nil {
		return fmt3.Errorf("this.InstancdID == nil && that.InstancdID != nil")
	} else if that1.InstancdID != nil {
		return fmt3.Errorf("InstancdID this(%v) Not Equal that(%v)", this.InstancdID, that1.InstancdID)
	}
	if len(this.Cmds) != len(that1.Cmds) {
		return fmt3.Errorf("Cmds this(%v) Not Equal that(%v)", len(this.Cmds), len(that1.Cmds))
	}
	for i := range this.Cmds {
		if !bytes.Equal(this.Cmds[i], that1.Cmds[i]) {
			return fmt3.Errorf("Cmds this[%v](%v) Not Equal that[%v](%v)", i, this.Cmds[i], i, that1.Cmds[i])
		}
	}
	if len(this.Deps) != len(that1.Deps) {
		return fmt3.Errorf("Deps this(%v) Not Equal that(%v)", len(this.Deps), len(that1.Deps))
	}
	for i := range this.Deps {
		if this.Deps[i] != that1.Deps[i] {
			return fmt3.Errorf("Deps this[%v](%v) Not Equal that[%v](%v)", i, this.Deps[i], i, that1.Deps[i])
		}
	}
	if this.From != nil && that1.From != nil {
		if *this.From != *that1.From {
			return fmt3.Errorf("From this(%v) Not Equal that(%v)", *this.From, *that1.From)
		}
	} else if this.From != nil {
		return fmt3.Errorf("this.From == nil && that.From != nil")
	} else if that1.From != nil {
		return fmt3.Errorf("From this(%v) Not Equal that(%v)", this.From, that1.From)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt3.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Commit) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Commit)
	if !ok {
		return false
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ReplicaID != nil && that1.ReplicaID != nil {
		if *this.ReplicaID != *that1.ReplicaID {
			return false
		}
	} else if this.ReplicaID != nil {
		return false
	} else if that1.ReplicaID != nil {
		return false
	}
	if this.InstancdID != nil && that1.InstancdID != nil {
		if *this.InstancdID != *that1.InstancdID {
			return false
		}
	} else if this.InstancdID != nil {
		return false
	} else if that1.InstancdID != nil {
		return false
	}
	if len(this.Cmds) != len(that1.Cmds) {
		return false
	}
	for i := range this.Cmds {
		if !bytes.Equal(this.Cmds[i], that1.Cmds[i]) {
			return false
		}
	}
	if len(this.Deps) != len(that1.Deps) {
		return false
	}
	for i := range this.Deps {
		if this.Deps[i] != that1.Deps[i] {
			return false
		}
	}
	if this.From != nil && that1.From != nil {
		if *this.From != *that1.From {
			return false
		}
	} else if this.From != nil {
		return false
	} else if that1.From != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
